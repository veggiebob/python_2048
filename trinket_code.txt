#paste there vv
#https://trinket.io/library/trinkets/create?lang=pygame

import pygame, sys, math, random
from pygame.locals import *
pygame.init()

DIRECTION = {
    'UP': {'x':0,'y':-1},
    'DOWN': {'x':0,'y':1},
    'RIGHT': {'x':1,'y':0},
    'LEFT': {'x':-1,'y':0},
    'DOWN_RIGHT': {'x':1,'y':1},
    'UP_RIGHT': {'x': 1, 'y': -1},
    'DOWN_LEFT': {'x': -1, 'y': 1},
    'UP_LEFT': {'x': -1, 'y': -1},
}

class Text:
    def __init__ (self):
        self.fontPath = "comicsansms"
        self.font = pygame.font.SysFont(self.fontPath, 20)#pygame.font.Font(self.fontPath, 20)
        self.fonts = {
            20:self.font
        }
    def draw (self, txt="sample text", size=20, color=(0,0,0)):
        size = int(size)
        try:
            self.fonts[size]
        except:
            self.fonts[size] = pygame.font.SysFont(self.fontPath, size)

        fo = self.fonts[size]
        surf = fo.render(str(txt), True, color)
        return surf
    def drawToSurface (self, surface, position, txt="sample text", size=20, color=(0,0,0)):
        surf = self.draw(txt, size, color)
        surface.blit(surf, (int(position[0]-surf.get_width()/2), int(position[1]-surf.get_height()/2)))

class Board:
    def __init__ (self, dim, dsize):
        self.dim = dim
        self.dsize = dsize # draw size
        self.tsize = dsize/dim # tile size
        self.tborder = self.tsize*0.05
        self.randRange = [1, 1]
        self.board = [[None for j in range(0, dim)] for i in range(0, dim)]
        self.addRandomTile()
        self.Lost = False
        self.knowledgeOfDeath = False
        self.boardFilled = False
        self.score = 0
        self.lastScore = 0
        self.undone = True
        self.mergedOrSlid = False
        self.background = pygame.Surface((dsize, dsize))
        self.background.fill((150, 150, 150))
        for i in range(self.dim):
            for j in range(self.dim):
                pygame.draw.rect(self.background, (170, 170, 170), (j*self.tsize+self.tborder, i*self.tsize+self.tborder, self.tsize-self.tborder*2, self.tsize-self.tborder*2), 0)
    def printBoard (self):
        for i in self.board:
            s = "|"
            for t in i:
                s += str(t.getNumber() if t is not None else " ")
                s += " "
            s += "|"
            print(s)
    def reset (self):
        self.board = [[None for j in range(0, self.dim)] for i in range(0, self.dim)]
        self.addRandomTile()
        self.Lost = False
        self.score = 0
        self.lastScore = 0
    def randbool (self):
        return bool(random.randint(0, 1))
    def constrain (self, v, x, y):
        return math.min(math.max(v, x), y)
    def draw (self):
        surf = pygame.Surface((self.dsize, self.dsize))
        surf.blit(self.background, (0, 0))
        iy = -1
        for i in self.board:
            iy+=1
            ix = -1
            for t in i:
                ix+=1
                if t is None:
                    continue
                t.run()
                t.drawToSurface(surf, self.tsize - self.tborder*0.9)
        return surf
    def getTile(self, p):
        return self.board[p[0]][p[1]]
    def switchTiles (self, t1, t2):
        temp = self.getTile(t1)
        self.board[t1[0]][t1[1]] = self.getTile(t2)
        self.board[t2[0]][t2[1]] = temp
    def setDestinations (self):
        iy = -1
        for i in self.board:
            iy += 1
            ix = -1
            for t in i:
                ix += 1
                if t is None:
                    continue
                t.destination = [ix*self.tsize, iy*self.tsize]
        #         print("[%d, %d] -> %s"%(iy, ix, t.destination))
        # print("tile size: %s"%self.tsize)
    def resetMerges (self):
        for i in self.board:
            for j in i:
                if j is not None:
                    j.merged = False
    def resetSlides (self):
        for i in self.board:
            for j in i:
                if j is not None:
                    j.slid = False
    def unNewAll (self):
        for i in self.board:
            for j in i:
                if j is not None:
                    j.isNew = False
    def setPastIndicies (self):
        for i in range(self.dim):
            for j in range(self.dim):
                if self.board[i][j] is not None:
                    self.board[i][j].pastIndexA = [i, j]
    def lost (self):
        l = True
        for i in self.board:
            for j in i:
                if j is None: # there is an empty square
                    l = False
        self.boardFilled = l
        cantwin = l and not self.hasPossibleMerge()
        if cantwin: self.Lost = True
        self.knowledgeOfDeath = False
        return cantwin # there is not an empty square
    def possibleMergeDirection (self, direction):
        dx = direction['x']
        dy = direction['y']
        ri = [max(0, -dy), min(self.dim - dy, self.dim) - 1]
        rj = [max(0, -dx), min(self.dim - dx, self.dim) - 1]
        RI = range(ri[0], ri[1] + 1)
        RJ = range(rj[0], rj[1] + 1)
        for i in RI:
            for j in RJ:
                t = self.board[i][j]
                tn = self.board[i + dy][j + dx]
                if t is None or tn is None:
                    continue
                if t.power == tn.power:
                    return True
        return False
    def hasPossibleMerge (self):
        return self.possibleMergeDirection(DIRECTION['UP']) \
               or self.possibleMergeDirection(DIRECTION['DOWN']) \
               or self.possibleMergeDirection(DIRECTION['LEFT']) \
               or self.possibleMergeDirection(DIRECTION['RIGHT'])

    def addRandomTile (self):
        while True:
            ri = random.randint(0, self.dim-1)
            rj = random.randint(0, self.dim-1)
            if self.getTile([ri, rj]) is None:
                x = rj*self.tsize
                y = ri*self.tsize
                self.board[ri][rj] = Tile([x, y], random.randint(self.randRange[0], self.randRange[1]))
                break

    def unmerge (self):
        newBoard = [[None for j in range(0, self.dim)] for i in range(0, self.dim)]
        for i in range(self.dim):
            for j in range(self.dim):
                t = self.board[i][j]
                if t is None or t.isNew:
                    continue
                nindex = t.pastIndexA
                po = t.power
                newBoard[nindex[0]][nindex[1]] = self.getTile([i, j])
                newPos = self.getTile([i, j]).position
                nt = Tile([newPos[0], newPos[1]], self.getTile([i, j]).power - 1)
                nt.sizePercent = 1.0
                if t.merged:
                    newBoard[nindex[0]][nindex[1]].power = po - 1
                    bindex = t.pastIndexB
                    newBoard[bindex[0]][bindex[1]] = nt
        self.board = newBoard
        self.setDestinations()
        self.undone = True
        self.score = self.lastScore

    def merge (self, direction):
        dx = direction['x']
        dy = direction['y']
        ri = [max(0, -dy), min(self.dim-dy, self.dim)-1]
        rj = [max(0, -dx), min(self.dim-dx, self.dim)-1]
        RI = range(ri[0], ri[1]+1)
        RJ = range(rj[0], rj[1]+1)
        done = False
        self.resetMerges()
        while not done:
            done = True
            for ii in RI:
                i = ii
                if dy>0:
                    i = ri[1]-(ii-ri[0])
                for jj in RJ:
                    j = jj
                    if dx>0:
                        j = rj[1]-(jj-rj[0])
                    t = self.board[i][j]
                    tn = self.board[i+dy][j+dx]
                    if t is None or tn is None:
                        continue
                    if t.merged or tn.merged:
                        continue
                    if t.power == tn.power:
                        # todo:add past indicies, a and b
                        self.board[i+dy][j+dx].position = t.position
                        self.board[i][j] = None
                        tn.power += 1
                        tn.setSizePercent(1.4)
                        tn.pastIndexA = tn.pastIndexA # oh well
                        tn.pastIndexB = t.pastIndexA
                        tn.slid = True
                        tn.merged = True
                        self.score += tn.getNumber()
                        done = False
                        self.mergedOrSlid = True
    def slide (self, direction):
        switched = True
        dx = direction['x']
        dy = direction['y']
        ri = [max(0, -dy), min(self.dim-dy, self.dim)]
        rj = [max(0, -dx), min(self.dim-dx, self.dim)]
        while switched:
            switched = False
            for i in range(ri[0], ri[1]):
                for j in range(rj[0], rj[1]):
                    t = self.board[i][j]
                    tn = self.board[i+dy][j+dx]
                    if tn is None and t is not None:
                        self.board[i+dy][j+dx] = self.board[i][j]
                        if not self.board[i+dy][j+dx].slid:
                            self.board[i + dy][j + dx].slid = True
                            self.board[i+dy][j+dx].pastIndexA = [i, j]
                        self.board[i][j] = None
                        switched = True
                        self.mergedOrSlid = True

    def turn (self, direction):
        self.lastScore = self.score
        self.undone = False
        self.mergedOrSlid = False
        self.setPastIndicies() # set all of the past indicies at the current location
        self.resetSlides() # make all the tiles not have the condition 'slid'
        self.slide(direction) # slide all the tiles in the direction
        self.merge(direction) # merge all the tiles in the direction
        # self.resetSlides() # reset the condition 'slid' again
        self.slide(direction) # slide all the tiles in the direction
        self.lost() # check if lost
        self.unNewAll() # make all the tiles on the board at this point 'not new'
        self.setDestinations() # set physical locations
        if self.Lost or self.boardFilled or not self.mergedOrSlid:
            return
        self.addRandomTile() # add a random tile if the board isn't filled and you haven't lost


class Button:
    def __init__ (self, rect, func, txt):
        self.border = pygame.Rect(rect)
        self.pressed = False
        self.pressedColor = (200, 200, 200)
        self.unpressedColor = (200, 200, 200)
        self.hoveringColor = (230, 230, 230)
        self.font = pygame.font.SysFont("comicsansms", 15)
        self.hovering = False
        self.func = func
        self.text = txt
    def drawTextCenter (self, x, y, surface, col):
        tfont = self.text.split("\n")
        if len(tfont)>1:
            print("we have a multiline")
            print(tfont)
            surfs = []
            tmaxwidth = 0
            theight = 0
            for i in tfont:
                surfs.append(pygame.font.Font.render(self.font, i, True, col))

        tsurf = pygame.font.Font.render(self.font, self.text, True, col)
        w, h = self.font.size(self.text)
        surface.blit(tsurf, (x-w/2, y-h/2))
    def press(self):
        if self.hovering:
            self.pressed = True
    def depress (self):
        self.pressed = False
    def setpress (self, p):
        self.pressed = p
    def click (self):
        if self.hovering:
            self.func()
    def toggle(self):
        if self.hovering:
            self.pressed = not self.pressed
    def hover (self, mouse):
        # self.hovering = (self.border.collidepoint(mouse))
        self.hovering = mouse[0]>self.border.x and mouse[1]>self.border.y and mouse[1]<self.border.bottom and mouse[0]<self.border.right
    def draw (self, surf):
        c = self.pressedColor if self.pressed and self.hovering else (self.hoveringColor if self.hovering else self.unpressedColor)
        pygame.draw.rect(surf, c, self.border, 0)
        # pygame.draw.rect(surf, (0, 0, 0), self.border, 1)
        self.drawTextCenter(self.border.centerx, self.border.centery, surf, (0, 0, 0))
    def run (self, surf, mouse, md=-1, cl=False):
        if md!=-1:
            self.setpress(md)
        if cl:
            self.click()
        self.hover(mouse)
        self.draw(surf)

class Tile:
    def __init__ (self, pos, power):
        self.position = pos
        self.destination = None
        self.power = power

        self.sizePercent = 0.0

        self.merged = False
        self.slid = False
        self.pastIndexA = [-1, -1]
        self.pastIndexB = [-1, -1]
        self.isNew = True

        self.t = Text()
        self.BGcolor = (100, 50, 50)
        self.border = 0
        self.colors = [
            (0, 0, 0), # 1
            (150, 150, 150), # 2
            (200, 180, 180), # 4
            (200, 150, 100), # 8
            (200, 100, 100), # 16
            (200, 100, 100), # 32
            (230, 150, 150), # 64
            (230, 230, 150), # 128
            (230, 230, 180), # 256
            (240, 240, 210), # 512
            (200, 200, 90), # 1024
            (200, 200, 0), # 2048

        ]
    def run (self):
        if self.destination is not None:
            dx = (self.destination[0] - self.position[0])
            dy = (self.destination[1] - self.position[1])
            self.position[0] += dx * 0.3
            self.position[1] += dy * 0.3
            if abs(dx) < 5 and abs(dy) < 5:
                self.position = self.destination
        self.sizePercent += (1.0-self.sizePercent)*0.2
        if self.sizePercent>0.98 and self.sizePercent<1.02:
            self.sizePercent = 1.0
    def setSizePercent (self, n):
        self.sizePercent = n
    def getNumber (self):
        return int(math.pow(2, self.power))
    def drawToSurface (self, surface, s):
        # pygame.draw.rect(surface, self.BGcolor, (self.position[0], self.position[1], s, s), 0)
        self.border = s*(1.0-self.sizePercent)/2
        col = self.colors[self.power] if self.power < len(self.colors) else (255, 0, 0)
        pygame.draw.rect(surface, col, (self.position[0]+self.border, self.position[1]+self.border, s-self.border*2, s-self.border*2), 0)
        self.t.drawToSurface(
            surface,
            (self.position[0]+(s-self.border*2)/2+self.border, self.position[1]+(s-self.border*2)/2+self.border),
            self.getNumber(),
            s*self.sizePercent*0.7 / math.sqrt(math.floor(math.log(self.getNumber(), 10))+1),
            (255, 255, 255)
        )



# constants

WIDTH = 500
HEIGHT = 500
TWIDTH = WIDTH*3/4
THEIGHT = HEIGHT*3/4
TBORDER = 3
TX = (WIDTH-TWIDTH)/2
TY = (HEIGHT-THEIGHT)/2
CLOCK = pygame.time.Clock()
FPS = 60

DISPLAYSURF = pygame.display.set_mode((WIDTH, HEIGHT))
pygame.display.set_caption("2048 by Veggiebob")
TILESURF = pygame.Surface((TWIDTH, THEIGHT))

mainBoard = Board(4, TWIDTH)
T = Text()

DISPLAYSURF.blit(mainBoard.draw(), (TX, TY))
def getDirection (k):
    if k==K_DOWN or k==K_KP2:
        return DIRECTION['DOWN']
    elif k==K_UP or k==K_KP8:
        return DIRECTION['UP']
    elif k==K_RIGHT or k==K_KP6:
        return DIRECTION['RIGHT']
    elif k==K_LEFT or k==K_KP4:
        return DIRECTION['LEFT']
    elif k==K_KP7:
        return DIRECTION['UP_LEFT']
    elif k==K_KP9:
        return DIRECTION['UP_RIGHT']
    elif k==K_KP1:
        return DIRECTION['DOWN_LEFT']
    elif k==K_KP3:
        return DIRECTION['DOWN_RIGHT']
    return DIRECTION['UP']

def alert (message):
    global frozen
    global warnButton
    global mousedown, click
    frozen = True
    click = False
    mousedown = False
    warnButton.text = message
def unfreeze ():
    global frozen
    global mousedown
    global mainBoard
    mousedown = False
    frozen = False
    if mainBoard.Lost:
        mainBoard.knowledgeOfDeath = True
        # mainBoard.reset()

def printTest ():
    print("print test")

def pause ():
    alert("paused")

def reset ():
    alert("reset")
    mainBoard.reset()

def undo ():
    if mainBoard.undone:
        alert("Can only undo once")
    else:
        mainBoard.unmerge()

def youdied ():
    alert("you died")

def help ():
    alert('arrow keys move')



click = False
button = -1
mousedown = False
frozen = False
warnButton = Button((WIDTH/4, HEIGHT/4, WIDTH/2, HEIGHT/2), unfreeze, "no error?")


buttonWidth = (WIDTH-TWIDTH)/2
fullb = buttonWidth
buttons = [
    # [ text, function, height ]
    # ["test", printTest, fullb],
    # ["pause", pause, fullb],
    ["reset", reset, fullb],
    ["undo", undo, fullb],
    ['help', help, fullb]
]
buttonobj = []
buttonMargin = 2
buttonY = fullb + 0
for b in buttons:
    buttonobj.append(Button((buttonMargin, buttonY, buttonWidth-buttonMargin*2, b[2]), b[1], b[0]))
    buttonY += b[2] + buttonMargin

DISPLAYSURF.fill((230, 230, 230))
T.drawToSurface(DISPLAYSURF, (WIDTH / 2, (HEIGHT - THEIGHT) / 4), "2048", 30, (200, 200, 0))
while True:
    k = -1
    mrel = [0, 0]
    button = -1
    click = False
    for event in pygame.event.get():
        if event.type == QUIT:
            pygame.quit()
            sys.exit()
        elif event.type==KEYDOWN:
            k = event.key
        elif event.type == MOUSEMOTION:
            mrel = event.rel
            button = 0 if event.buttons[0]>0 else (1 if event.buttons[1]>0 else (2 if event.buttons[2]>0 else -1))
            mouse = event.pos
        elif event.type == MOUSEBUTTONDOWN:
            button = event.button-1
            mouse = event.pos
            click = True
            mousedown = True
        elif event.type == MOUSEBUTTONUP:
            mousedown = False

    if frozen:
        warnButton.run(DISPLAYSURF, mouse, mousedown, click)
    else:
        TILESURF.blit(mainBoard.draw(), (0, 0))
        DISPLAYSURF.blit(TILESURF, (TX, TY))
        for b in buttonobj:
            b.run(DISPLAYSURF, mouse, mousedown, click)
        if not k==-1:
            mainBoard.turn(getDirection(k))
        pygame.draw.rect(DISPLAYSURF, (230, 230, 230), (0, HEIGHT-(HEIGHT-THEIGHT)/2, WIDTH, (HEIGHT-THEIGHT)/2), 0)
        T.drawToSurface(DISPLAYSURF, (WIDTH/2, HEIGHT-(HEIGHT-THEIGHT)/4), str(mainBoard.score), 30, (50, 50, 50))
        if mainBoard.Lost and not mainBoard.knowledgeOfDeath:
            youdied()
    CLOCK.tick(FPS)
    pygame.display.update()
